{"version":3,"sources":["api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.tsx","components/UsersList/UsersList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","loadUsersPosts","a","fetch","response","json","loadUserPostDetails","postId","PostsList","handleOpenPostDetails","selectorValue","useState","postList","setPostList","getUserPosts","userPostsFromServer","filter","post","userId","useEffect","className","map","body","id","type","onClick","loadPostComments","deleteComment","method","addComment","name","email","headers","JSON","stringify","NewCommentForm","getUserComments","userName","setUserName","userEmail","setUserEmail","userComment","setUserComment","handleSubmit","event","preventDefault","onSubmit","placeholder","value","onChange","target","PostDetails","isCommemtsHidden","setIsCommemtsHidden","userComments","setUserComments","userPostTitle","setUserPostTitle","getPostData","Promise","all","postDetailsFromServer","userCommentsFromServer","title","getPostComments","handleDeleteComment","length","commentary","loadUsers","UsersList","React","memo","handleSelector","users","setUsers","getUsers","usersFromServer","user","App","setPostId","setSelectorValue","useCallback","ReactDOM","render","document","getElementById"],"mappings":"8TAAMA,G,kBAAW,qCAEJC,EAAc,uCAAG,4BAAAC,EAAA,sEACLC,MAAM,GAAD,OAAIH,EAAJ,WADA,cACtBI,EADsB,yBAGrBA,EAASC,QAHY,2CAAH,qDAMdC,EAAmB,uCAAG,WAAOC,GAAP,eAAAL,EAAA,sEACVC,MAAM,GAAD,OAAIH,EAAJ,kBAAsBO,IADjB,cAC3BH,EAD2B,yBAG1BA,EAASC,QAHiB,2CAAH,sD,OCGnBG,EAA6B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,sBACAF,EAEI,EAFJA,OACAG,EACI,EADJA,cAEA,EAAgCC,mBAAiB,IAAjD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAY,uCAAG,4BAAAZ,EAAA,sEACeD,IADf,UACbc,EADa,QAGfL,EAHe,yCAIVG,EAAYE,EAAoBC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,SAAWR,OAJrD,gCAOZG,EAAYE,IAPA,2CAAH,qDAclB,OAJAI,qBAAU,WACRL,MACC,CAACJ,IAGF,sBAAKU,UAAU,YAAf,UACE,wCAEA,oBAAIA,UAAU,kBAAd,SACGR,EAASS,KAAI,SAAAJ,GAAI,OAChB,qBAAkBG,UAAU,kBAA5B,UACE,gCACE,6CAAcH,EAAKC,OAAnB,SACCD,EAAKK,QAEPf,IAAWU,EAAKM,GACf,wBACEC,KAAK,SACLJ,UAAU,2BACVK,QAAS,kBAAMhB,EAAsB,IAHvC,mBAQA,wBACEe,KAAK,SACLJ,UAAU,2BACVK,QAAS,kBAAMhB,EAAsBQ,EAAKM,KAH5C,oBAdKN,EAAKM,aCtClBvB,G,MAAW,qCAEJ0B,EAAgB,uCAAG,WAAOnB,GAAP,eAAAL,EAAA,sEACPC,MAAM,GAAD,OAAIH,EAAJ,4BAAgCO,IAD9B,cACxBH,EADwB,yBAGvBA,EAASC,QAHc,2CAAH,sDAMhBsB,EAAa,uCAAG,WAAOJ,GAAP,eAAArB,EAAA,sEACJC,MAAM,GAAD,OAAIH,EAAJ,qBAAyBuB,GAAM,CACzDK,OAAQ,WAFiB,cACrBxB,EADqB,yBAKpBA,EAASC,QALW,2CAAH,sDAQbwB,EAAU,uCAAG,WACxBtB,EACAuB,EACAC,EACAT,GAJwB,eAAApB,EAAA,sEAMDC,MAAM,GAAD,OAAIH,EAAJ,aAAyB,CACnD4B,OAAQ,OACRI,QAAS,CACP,eAAgB,mCAElBV,KAAMW,KAAKC,UAAU,CACnB3B,SACAuB,OACAC,QACAT,WAfoB,cAMlBlB,EANkB,yBAmBjBA,EAASC,QAnBQ,2CAAH,4DCPV8B,EAAkC,SAAC,GAGzC,IAFL5B,EAEI,EAFJA,OACA6B,EACI,EADJA,gBAEA,EAAgCzB,mBAAS,IAAzC,mBAAO0B,EAAP,KAAiBC,EAAjB,KACA,EAAkC3B,mBAAS,IAA3C,mBAAO4B,EAAP,KAAkBC,EAAlB,KACA,EAAsC7B,mBAAS,IAA/C,mBAAO8B,EAAP,KAAoBC,EAApB,KAQMC,EAAY,uCAAG,WAAOC,GAAP,SAAA1C,EAAA,6DACnB0C,EAAMC,iBADa,SAGbhB,EAAWtB,EAAQ8B,EAAUE,EAAWE,GAH3B,uBAIbL,IAJa,OALnBE,EAAY,IACZE,EAAa,IACbE,EAAe,IAGI,2CAAH,sDASlB,OACE,uBACEtB,UAAU,iBACV0B,SAAUH,EAFZ,UAIE,qBAAKvB,UAAU,aAAf,SACE,uBACEI,KAAK,OACLM,KAAK,OACLiB,YAAY,YACZ3B,UAAU,wBACV4B,MAAOX,EACPY,SAAU,SAAAL,GAAK,OAAIN,EAAYM,EAAMM,OAAOF,YAIhD,qBAAK5B,UAAU,aAAf,SACE,uBACEI,KAAK,OACLM,KAAK,QACLiB,YAAY,aACZ3B,UAAU,wBACV4B,MAAOT,EACPU,SAAU,SAAAL,GAAK,OAAIJ,EAAaI,EAAMM,OAAOF,YAIjD,qBAAK5B,UAAU,aAAf,SACE,0BACEU,KAAK,OACLiB,YAAY,oBACZ3B,UAAU,wBACV4B,MAAOP,EACPQ,SAAU,SAAAL,GAAK,OAAIF,EAAeE,EAAMM,OAAOF,YAInD,wBACExB,KAAK,SACLJ,UAAU,uCACVK,QAASkB,EAHX,+BCzDOQ,G,MAA+B,SAAC,GAEtC,IADL5C,EACI,EADJA,OAEA,EAAgDI,oBAAS,GAAzD,mBAAOyC,EAAP,KAAyBC,EAAzB,KAEA,EAAwC1C,mBAAiB,IAAzD,mBAAO2C,EAAP,KAAqBC,EAArB,KACA,EAA0C5C,mBAAS,IAAnD,mBAAO6C,EAAP,KAAsBC,EAAtB,KAEMC,EAAW,uCAAG,kCAAAxD,EAAA,sEAC4CyD,QAAQC,IAAI,CACxEtD,EAAoBC,GACpBmB,EAAiBnB,KAHD,mCACXsD,EADW,KACYC,EADZ,KAMlBP,EAAgBO,GAChBL,EAAiBI,EAAsBE,OAPrB,2CAAH,qDAUXC,EAAe,uCAAG,4BAAA9D,EAAA,sEACewB,EAAiBnB,GADhC,OAChBuD,EADgB,OAGtBP,EAAgBO,GAHM,2CAAH,qDAMfG,EAAmB,uCAAG,WAAO1C,GAAP,SAAArB,EAAA,sEACpByB,EAAcJ,GADM,uBAEpByC,IAFoB,2CAAH,sDAKzB7C,qBAAU,WACR6C,IACAN,MACC,CAACnD,IAMJ,OACE,sBAAKa,UAAU,cAAf,UACE,+CAEA,yBAASA,UAAU,oBAAnB,SACE,4BAAIoC,MAGN,0BAASpC,UAAU,wBAAnB,UACE,wBACEI,KAAK,SACLJ,UAAU,wBACVK,QAhBiB,WACvB4B,GAAqBD,IAYjB,wBAKWE,EAAaY,OALxB,eAQA,oBACE9C,UAAWgC,EAAmB,oBAAsB,0BADtD,SAGGE,EAAajC,KAAI,SAAA8C,GAAU,OAC1B,qBAAwB/C,UAAU,yBAAlC,UACE,wBACEI,KAAK,SACLJ,UAAU,oCACVK,QAAS,kBAAMwC,EAAoBE,EAAW5C,KAHhD,eAOA,4BAAI4C,EAAW7C,SARR6C,EAAW5C,YAc1B,kCACE,qBAAKH,UAAU,4BAAf,SACE,cAAC,EAAD,CACEgB,gBAAiB4B,EACjBzD,OAAQA,aCvFP6D,EAAS,uCAAG,4BAAAlE,EAAA,sEACAC,MAAM,GAAD,OAHb,oCAGa,WADL,cACjBC,EADiB,yBAGhBA,EAASC,QAHO,2CAAH,qDCOTgE,EAA6BC,IAAMC,MAC9C,YAAwC,IAArC7D,EAAoC,EAApCA,cAAe8D,EAAqB,EAArBA,eAChB,EAA0B7D,mBAAiB,IAA3C,mBAAO8D,EAAP,KAAcC,EAAd,KAEMC,EAAQ,uCAAG,4BAAAzE,EAAA,sEACekE,IADf,OACTQ,EADS,OAGfF,EAASE,GAHM,2CAAH,qDAUd,OAJAzD,qBAAU,WACRwD,MACC,IAGD,mCACE,yBACEvD,UAAU,qBACV4B,MAAOtC,EACPuC,SAAUuB,EAHZ,UAKE,wBAAQxB,MAAM,IAAd,uBACCyB,EAAMpD,KAAI,SAAAwD,GAAI,OACb,wBAAsB7B,MAAO6B,EAAKtD,GAAlC,SACGsD,EAAK/C,MADK+C,EAAKtD,eCmBfuD,EA3CO,WACpB,MAA4BnE,mBAAS,GAArC,mBAAOJ,EAAP,KAAewE,EAAf,KACA,EAA0CpE,mBAAS,GAAnD,mBAAOD,EAAP,KAAsBsE,EAAtB,KAEMvE,EAAqB,uCAAG,WAAOc,GAAP,SAAArB,EAAA,sDAC5B6E,EAAUxD,GADkB,2CAAH,sDAIrBiD,EAAiBS,uBAAY,SAACrC,GAClCoC,GAAkBpC,EAAMM,OAAOF,SAC9B,IAEH,OACE,sBAAK5B,UAAU,MAAf,UACE,yBAAQA,UAAU,cAAlB,gCAEE,cAACiD,EAAD,CACE3D,cAAeA,EACf8D,eAAgBA,OAIpB,uBAAMpD,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEV,cAAeA,EACfD,sBAAuBA,EACvBF,OAAQA,MAIZ,qBAAKa,UAAU,eAAf,SACc,IAAXb,GACC,cAAC,EAAD,CACEA,OAAQA,aCtCtB2E,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.aa6e1589.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const loadUsersPosts = async (): Promise<Post[]> => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const loadUserPostDetails = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\n\nimport { loadUsersPosts } from '../../api/posts';\n\ntype Props = {\n  handleOpenPostDetails: (postId: number) => void;\n  postId: number;\n  selectorValue: number;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  handleOpenPostDetails,\n  postId,\n  selectorValue,\n}) => {\n  const [postList, setPostList] = useState<Post[]>([]);\n\n  const getUserPosts = async () => {\n    const userPostsFromServer = await loadUsersPosts();\n\n    if (selectorValue) {\n      return setPostList(userPostsFromServer.filter(post => post.userId === selectorValue));\n    }\n\n    return setPostList(userPostsFromServer);\n  };\n\n  useEffect(() => {\n    getUserPosts();\n  }, [selectorValue]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {postList.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.body}\n            </div>\n            {postId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleOpenPostDetails(0)}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => handleOpenPostDetails(post.id)}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const loadPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const deleteComment = async (id: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${id}`, {\n    method: 'DELETE',\n  });\n\n  return response.json();\n};\n\nexport const addComment = async (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<PostComm> => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/comments';\n\ntype Props = {\n  postId: number;\n  getUserComments: () => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  getUserComments,\n}) => {\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userComment, setUserComment] = useState('');\n\n  const clearInputs = () => {\n    setUserName('');\n    setUserEmail('');\n    setUserComment('');\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    await addComment(postId, userName, userEmail, userComment);\n    await getUserComments();\n\n    clearInputs();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={userName}\n          onChange={event => setUserName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={userEmail}\n          onChange={event => setUserEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={userComment}\n          onChange={event => setUserComment(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={handleSubmit}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nimport { loadPostComments, deleteComment } from '../../api/comments';\n\nimport { loadUserPostDetails } from '../../api/posts';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  postId,\n}) => {\n  const [isCommemtsHidden, setIsCommemtsHidden] = useState(true);\n\n  const [userComments, setUserComments] = useState<Post[]>([]);\n  const [userPostTitle, setUserPostTitle] = useState('');\n\n  const getPostData = async () => {\n    const [postDetailsFromServer, userCommentsFromServer] = await Promise.all([\n      loadUserPostDetails(postId),\n      loadPostComments(postId),\n    ]);\n\n    setUserComments(userCommentsFromServer);\n    setUserPostTitle(postDetailsFromServer.title);\n  };\n\n  const getPostComments = async () => {\n    const userCommentsFromServer = await loadPostComments(postId);\n\n    setUserComments(userCommentsFromServer);\n  };\n\n  const handleDeleteComment = async (id: number) => {\n    await deleteComment(id);\n    await getPostComments();\n  };\n\n  useEffect(() => {\n    getPostComments();\n    getPostData();\n  }, [postId]);\n\n  const handleButtonHide = () => {\n    setIsCommemtsHidden(!isCommemtsHidden);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{userPostTitle}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button button-visible\"\n          onClick={handleButtonHide}\n        >\n          {`Hide ${userComments.length} comments`}\n        </button>\n\n        <ul\n          className={isCommemtsHidden ? 'PostDetails__list' : 'PostDetails__list--hide'}\n        >\n          {userComments.map(commentary => (\n            <li key={commentary.id} className=\"PostDetails__list-item\">\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => handleDeleteComment(commentary.id)}\n              >\n                X\n              </button>\n              <p>{commentary.body}</p>\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            getUserComments={getPostComments}\n            postId={postId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const loadUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { loadUsers } from '../../api/users';\n\ntype Props = {\n  selectorValue: number\n  handleSelector: (event: React.ChangeEvent<HTMLSelectElement>) => void\n};\n\nexport const UsersList: React.FC<Props> = React.memo(\n  ({ selectorValue, handleSelector }) => {\n    const [users, setUsers] = useState<User[]>([]);\n\n    const getUsers = async () => {\n      const usersFromServer = await loadUsers();\n\n      setUsers(usersFromServer);\n    };\n\n    useEffect(() => {\n      getUsers();\n    }, []);\n\n    return (\n      <>\n        <select\n          className=\"App__user-selector\"\n          value={selectorValue}\n          onChange={handleSelector}\n        >\n          <option value=\"0\">All users</option>\n          {users.map(user => (\n            <option key={user.id} value={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n      </>\n    );\n  },\n);\n","import React, { useState, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UsersList } from './components/UsersList';\n\nconst App: React.FC = () => {\n  const [postId, setPostId] = useState(0);\n  const [selectorValue, setSelectorValue] = useState(0);\n\n  const handleOpenPostDetails = async (id: number) => {\n    setPostId(id);\n  };\n\n  const handleSelector = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectorValue(+event.target.value);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        Select a user: &nbsp;\n        <UsersList\n          selectorValue={selectorValue}\n          handleSelector={handleSelector}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectorValue={selectorValue}\n            handleOpenPostDetails={handleOpenPostDetails}\n            postId={postId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {postId !== 0 && (\n            <PostDetails\n              postId={postId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}