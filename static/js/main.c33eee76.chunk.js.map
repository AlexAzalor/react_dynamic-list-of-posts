{"version":3,"sources":["api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["API_URL","loadPosts","a","fetch","response","json","loadPostDetails","id","deletePost","method","addPost","title","body","headers","JSON","stringify","updatePost","PostsList","handleButtonDetails","postId","setPostId","useState","posts","setPosts","addBody","setAddBody","addTitle","setAddTitle","idUpdatePost","setIdUpdatePost","getPosts","postsFromServer","delPost","clearFields","handleSubmitPost","event","preventDefault","handleSubmitPut","useEffect","className","onSubmit","type","value","name","onChange","target","onClick","map","post","placeholder","loadComments","deleteComment","addComment","NewCommentForm","getComments","setBody","handleSubmit","PostDetails","postDetails","setPostDetails","comments","setComments","getPostDetails","detailsFromServer","commentsFromServer","handleDeleteComment","commentary","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c33eee76.chunk.js","sourcesContent":["export const API_URL = 'https://bloggy-api.herokuapp.com';\n\nexport const loadPosts = async (): Promise<[]> => {\n  const response = await fetch(`${API_URL}/posts`);\n\n  return response.json();\n};\n\nexport const loadPostDetails = async (id: number) => {\n  const response = await fetch(`${API_URL}/posts/${id}?_embed=comments`);\n\n  return response.json();\n};\n\nexport const deletePost = async (id: number) => {\n  const response = await fetch(`${API_URL}/posts/${id}`, {\n    method: 'DELETE',\n  });\n\n  return response.json();\n};\n\nexport const addPost = async (\n  title: string,\n  body: string,\n) => {\n  const response = await fetch(`${API_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      title,\n      body,\n    }),\n  });\n\n  return response.json();\n};\n\nexport const updatePost = async (\n  id: number,\n  title: string,\n  body: string,\n) => {\n  const response = await fetch(`${API_URL}/posts/${id}`, {\n    method: 'PUT',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      title,\n      body,\n    }),\n  });\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport './PostsList.scss';\n\nimport {\n  addPost,\n  deletePost,\n  loadPosts,\n  updatePost,\n} from '../../api/posts';\n\ntype Props = {\n  handleButtonDetails: (id: number) => void;\n  postId: number;\n  setPostId: React.Dispatch<React.SetStateAction<number>>;\n};\n\nexport const PostsList: React.FC<Props> = ({ handleButtonDetails, postId, setPostId }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [addBody, setAddBody] = useState('');\n  const [addTitle, setAddTitle] = useState('');\n  const [idUpdatePost, setIdUpdatePost] = useState(0);\n\n  const getPosts = async () => {\n    const postsFromServer = await loadPosts();\n\n    setPosts(postsFromServer);\n  };\n\n  const delPost = async (id: number) => {\n    await deletePost(id);\n    await getPosts();\n  };\n\n  const clearFields = () => {\n    setAddTitle('');\n    setAddBody('');\n  };\n\n  const handleSubmitPost = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    await addPost(addTitle, addBody);\n    await updatePost(idUpdatePost, addTitle, addBody);\n    await getPosts();\n\n    clearFields();\n  };\n\n  const handleSubmitPut = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    await updatePost(idUpdatePost, addTitle, addBody);\n    await getPosts();\n\n    clearFields();\n  };\n\n  useEffect(() => {\n    getPosts();\n  }, [idUpdatePost]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <form\n        className=\"NewCommentForm\"\n        onSubmit={handleSubmitPost}\n      >\n        <input\n          type=\"text\"\n          value={addTitle}\n          name=\"title\"\n          onChange={event => setAddTitle(event.target.value)}\n        />\n\n        <textarea\n          className=\"NewCommentForm__input\"\n          name=\"body\"\n          value={addBody}\n          onChange={event => setAddBody(event.target.value)}\n        />\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n          onClick={handleSubmitPost}\n        >\n          Add a post\n        </button>\n      </form>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <h3>{post.title}</h3>\n              <p>{post.body}</p>\n            </div>\n\n            <div className=\"PostsList__form\">\n              {postId === post.id ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleButtonDetails(0)}\n                >\n                  Close details\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleButtonDetails(post.id)}\n                >\n                  Open details\n                </button>\n              )}\n\n              <form\n                className=\"NewCommentForm\"\n                onSubmit={handleSubmitPut}\n              >\n                <input\n                  type=\"hidden\"\n                  value={post.id}\n                  onChange={(event) => setPostId(+event.target.value)}\n                />\n\n                <input\n                  type=\"text\"\n                  placeholder=\"Type title\"\n                  value={addTitle}\n                  onChange={event => setAddTitle(event.target.value)}\n                />\n\n                <textarea\n                  className=\"NewCommentForm__input\"\n                  placeholder=\"Type text\"\n                  value={addBody}\n                  onChange={event => setAddBody(event.target.value)}\n                />\n\n                <button\n                  type=\"submit\"\n                  className=\"NewCommentForm__submit-button button\"\n                  onClick={() => setIdUpdatePost(post.id)}\n                >\n                  Update post\n                </button>\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button PostsList__button--red button\"\n                  onClick={() => delPost(post.id)}\n                >\n                  Remove post\n                </button>\n              </form>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const API_URL = 'https://bloggy-api.herokuapp.com';\n\nexport const loadComments = async (id: number) => {\n  const response = await fetch(`${API_URL}/posts/${id}?_embed=comments`);\n\n  return response.json();\n};\n\nexport const deleteComment = async (id: number) => {\n  const response = await fetch(`${API_URL}/comments/${id}?_embed=comments`, {\n    method: 'DELETE',\n  });\n\n  return response.json();\n};\n\nexport const addComment = async (\n  postId: number,\n  body: string,\n): Promise<Comments> => {\n  const response = await fetch(`${API_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify({\n      postId,\n      body,\n    }),\n  });\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\nimport { addComment } from '../../api/comments';\n\ntype Props = {\n  postId: number;\n  getComments: () => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, getComments }) => {\n  const [body, setBody] = useState('');\n\n  const clearField = () => {\n    setBody('');\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    await addComment(postId, body);\n    await getComments();\n\n    clearField();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={handleSubmit}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './PostDetails.scss';\n\nimport { loadPostDetails } from '../../api/posts';\nimport { deleteComment, loadComments } from '../../api/comments';\n\nimport { NewCommentForm } from '../NewCommentForm';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState<Post | null>();\n  const [comments, setComments] = useState<Comments[]>([]);\n\n  const getPostDetails = async () => {\n    const detailsFromServer = await loadPostDetails(postId);\n\n    setPostDetails(detailsFromServer);\n  };\n\n  const getComments = async () => {\n    const commentsFromServer = await loadComments(postId);\n\n    setComments(commentsFromServer.comments);\n  };\n\n  const handleDeleteComment = async (id: number) => {\n    await deleteComment(id);\n    await getComments();\n  };\n\n  useEffect(() => {\n    getComments();\n    getPostDetails();\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n\n        <ul className=\"PostDetails__list\">\n          {comments.map(commentary => (\n            <li key={commentary.id} className=\"PostDetails__list-item\">\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                onClick={() => handleDeleteComment(commentary.id)}\n              >\n                X\n              </button>\n              <p>{commentary.body}</p>\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            getComments={getComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [postId, setPostId] = useState(0);\n\n  const handleButtonDetails = (id: number) => {\n    setPostId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            handleButtonDetails={handleButtonDetails}\n            postId={postId}\n            setPostId={setPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {postId ? (\n            <PostDetails\n              postId={postId}\n            />\n          ) : ''}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}